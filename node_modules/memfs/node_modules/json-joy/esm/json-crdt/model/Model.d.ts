import { Const } from '../types/const/Const';
import { ITimestampStruct, IVectorClock, VectorClock } from '../../json-crdt-patch/clock';
import { JsonCrdtPatchOperation, Patch } from '../../json-crdt-patch/Patch';
import { ModelApi } from './api/ModelApi';
import { NodeIndex } from './NodeIndex';
import { RootLww } from '../types/lww-root/RootLww';
import { Extensions } from '../extensions/Extensions';
import type { JsonNode } from '../types/types';
import type { Printable } from '../../util/print/types';
export declare const UNDEFINED: Const;
export declare class Model implements Printable {
    static withLogicalClock(clockOrSessionId?: VectorClock | number): Model;
    static withServerClock(time?: number): Model;
    static fromBinary(data: Uint8Array): Model;
    root: RootLww;
    clock: IVectorClock;
    index: NodeIndex<JsonNode>;
    ext: Extensions;
    constructor(clock: IVectorClock);
    private _api?;
    get api(): ModelApi;
    tick: number;
    onchange: undefined | (() => void);
    applyBatch(patches: Patch[]): void;
    applyPatch(patch: Patch): void;
    applyOperation(op: JsonCrdtPatchOperation): void;
    protected deleteNodeTree(value: ITimestampStruct): void;
    fork(sessionId?: number): Model;
    clone(): Model;
    view(): unknown;
    toString(tab?: string): string;
    toBinary(): Uint8Array;
}
