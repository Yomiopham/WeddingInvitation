import { ArrayRga, ArrayChunk } from '../../../types/rga-array/ArrayRga';
import { BinaryRga, BinaryChunk } from '../../../types/rga-binary/BinaryRga';
import { ClockDecoder } from '../../../../json-crdt-patch/codec/clock/ClockDecoder';
import { Const } from '../../../types/const/Const';
import { RootLww } from '../../../types/lww-root/RootLww';
import { Timestamp } from '../../../../json-crdt-patch/clock';
import { Model, UNDEFINED } from '../../../model/Model';
import { ObjectLww } from '../../../types/lww-object/ObjectLww';
import { ORIGIN } from '../../../../json-crdt-patch/constants';
import { StringRga, StringChunk } from '../../../types/rga-string/StringRga';
import { ValueLww } from '../../../types/lww-value/ValueLww';
import { ArrayLww } from '../../../types/lww-array/ArrayLww';
export class Decoder {
    time;
    clockDecoder;
    decode(data) {
        const x = data[0];
        const isServerTime = typeof x === 'number';
        if (isServerTime) {
            this.time = x;
        }
        else {
            this.clockDecoder = ClockDecoder.fromArr(x);
        }
        const doc = isServerTime ? Model.withServerClock(x) : Model.withLogicalClock(this.clockDecoder.clock);
        const val = data[1] ? this.decodeNode(doc, data[1]) : UNDEFINED;
        doc.root = new RootLww(doc, val.id);
        return doc;
    }
    ts(arr, index) {
        const x = arr[index];
        if (typeof x === 'number') {
            if (x < 0) {
                const sessionIndex = -x;
                const timeDiff = arr[index + 1];
                return [this.clockDecoder.decodeId(sessionIndex, timeDiff), index + 2];
            }
            else {
                return [new Timestamp(1, this.time - x), index + 1];
            }
        }
        else {
            const time = x[0];
            switch (time) {
                case ORIGIN.time:
                    return [ORIGIN, index + 1];
                default:
                    return [new Timestamp(0, time), index + 1];
            }
        }
    }
    decodeNode(doc, data) {
        if (data instanceof Array) {
            switch (data[0]) {
                case 3:
                    return this.decodeObj(doc, data);
                case 5:
                    return this.decodeArr(doc, data);
                case 4:
                    return this.decodeStr(doc, data);
                case 2:
                    return this.decodeVal(doc, data);
                case 1:
                    return this.decodeConst(doc, data);
                case 8:
                    return this.decodeConstId(doc, data);
                case 6:
                    return this.decodeBin(doc, data);
                case 7:
                    return this.decodeTup(doc, data);
            }
        }
        throw new Error('UNKNOWN_NODE');
    }
    decodeObj(doc, data) {
        const [id, index] = this.ts(data, 1);
        const obj = new ObjectLww(doc, id);
        const length = data.length;
        for (let i = index; i < length;) {
            const key = data[i];
            const val = this.decodeNode(doc, data[++i]);
            obj.put(key, val.id);
            i++;
        }
        doc.index.set(obj);
        return obj;
    }
    decodeTup(doc, data) {
        const [id, index] = this.ts(data, 1);
        const obj = new ArrayLww(doc, id);
        const length = data.length;
        const elements = obj.elements;
        for (let i = index; i < length;) {
            const component = data[i++];
            if (!component)
                elements.push(undefined);
            else {
                const node = this.decodeNode(doc, component);
                elements.push(node.id);
            }
        }
        doc.index.set(obj);
        return obj;
    }
    decodeArr(doc, data) {
        const size = data[1];
        const [id, index] = this.ts(data, 2);
        const obj = new ArrayRga(doc, id);
        const self = this;
        let i = index;
        obj.ingest(size, () => {
            const [chunkId, idx] = self.ts(data, i);
            const content = data[idx];
            i = idx + 1;
            if (typeof content === 'number')
                return new ArrayChunk(chunkId, content, undefined);
            const ids = content.map((c) => this.decodeNode(doc, c).id);
            return new ArrayChunk(chunkId, content.length, ids);
        });
        doc.index.set(obj);
        return obj;
    }
    decodeStr(doc, data) {
        const size = data[1];
        const [id, index] = this.ts(data, 2);
        const node = new StringRga(id);
        const self = this;
        let i = index;
        node.ingest(size, () => {
            const [chunkId, idx] = self.ts(data, i);
            const content = data[idx];
            i = idx + 1;
            if (typeof content === 'number')
                return new StringChunk(chunkId, content, '');
            return new StringChunk(chunkId, content.length, content);
        });
        doc.index.set(node);
        return node;
    }
    decodeBin(doc, data) {
        const size = data[1];
        const [id, index] = this.ts(data, 2);
        const node = new BinaryRga(id);
        const self = this;
        let i = index;
        node.ingest(size, () => {
            const [chunkId, idx] = self.ts(data, i);
            const content = data[idx];
            i = idx + 1;
            if (typeof content === 'number')
                return new BinaryChunk(chunkId, content, undefined);
            const buf = content;
            return new BinaryChunk(chunkId, buf.length, buf);
        });
        doc.index.set(node);
        return node;
    }
    decodeVal(doc, data) {
        const [id, index] = this.ts(data, 1);
        const child = this.decodeNode(doc, data[index]);
        const obj = new ValueLww(doc, id, child.id);
        doc.index.set(obj);
        return obj;
    }
    decodeConst(doc, data) {
        const [id, index] = this.ts(data, 1);
        const value = data[index];
        const obj = new Const(id, value);
        doc.index.set(obj);
        return obj;
    }
    decodeConstId(doc, data) {
        const [id, index] = this.ts(data, 1);
        const val = this.ts(data, index)[0];
        const obj = new Const(id, val);
        doc.index.set(obj);
        return obj;
    }
}
