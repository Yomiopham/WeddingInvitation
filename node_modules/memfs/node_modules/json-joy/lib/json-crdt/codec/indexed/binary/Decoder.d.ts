import { ArrayRga } from '../../../types/rga-array/ArrayRga';
import { BinaryRga } from '../../../types/rga-binary/BinaryRga';
import { ClockTable } from '../../../../json-crdt-patch/codec/clock/ClockTable';
import { Const } from '../../../types/const/Const';
import { CrdtDecoder } from '../../../../json-crdt-patch/util/binary/CrdtDecoder';
import { IndexedFields, IndexedNodeFields } from './types';
import { ITimestampStruct, IVectorClock } from '../../../../json-crdt-patch/clock';
import { JsonNode } from '../../../types';
import { Model } from '../../../model';
import { MsgPackDecoderFast } from '../../../../json-pack/msgpack';
import { ObjectLww } from '../../../types/lww-object/ObjectLww';
import { StringRga } from '../../../types/rga-string/StringRga';
import { ValueLww } from '../../../types/lww-value/ValueLww';
export declare class Decoder {
    readonly dec: MsgPackDecoderFast<CrdtDecoder>;
    protected doc: Model;
    protected clockTable?: ClockTable;
    decode<M extends Model>(fields: IndexedFields, ModelConstructor?: new (clock: IVectorClock) => M): M;
    decodeFields<M extends Model>(clockTable: ClockTable, fields: IndexedNodeFields, ModelConstructor?: new (clock: IVectorClock) => M): M;
    protected ts(): ITimestampStruct;
    protected decodeNode(id: ITimestampStruct): JsonNode;
    cConst(id: ITimestampStruct): Const;
    cVal(id: ITimestampStruct): ValueLww;
    cObj(id: ITimestampStruct, length: number): ObjectLww;
    protected cStr(id: ITimestampStruct, length: number): StringRga;
    protected cBin(id: ITimestampStruct, length: number): BinaryRga;
    protected cArr(id: ITimestampStruct, length: number): ArrayRga;
}
