import { ArrayRga } from '../../../types/rga-array/ArrayRga';
import { BinaryRga } from '../../../types/rga-binary/BinaryRga';
import { ClockDecoder } from '../../../../json-crdt-patch/codec/clock/ClockDecoder';
import { CrdtDecoder } from '../../../../json-crdt-patch/util/binary/CrdtDecoder';
import { ITimestampStruct } from '../../../../json-crdt-patch/clock';
import { Model } from '../../../model';
import { MsgPackDecoderFast } from '../../../../json-pack/msgpack';
import { ObjectLww } from '../../../types/lww-object/ObjectLww';
import { StringRga } from '../../../types/rga-string/StringRga';
import { ArrayLww } from '../../../types/lww-array/ArrayLww';
import type { JsonNode } from '../../../types';
export declare class Decoder extends MsgPackDecoderFast<CrdtDecoder> {
    protected doc: Model;
    protected clockDecoder?: ClockDecoder;
    protected time: number;
    constructor();
    decode(data: Uint8Array): Model;
    protected decodeClockTable(): void;
    protected ts(): ITimestampStruct;
    protected cRoot(): JsonNode;
    cNode(): JsonNode;
    cObj(id: ITimestampStruct, length: number): ObjectLww;
    private cObjChunk;
    cTup(id: ITimestampStruct): ArrayLww;
    cArr(id: ITimestampStruct, length: number): ArrayRga;
    private readonly cArrChunk;
    cStr(id: ITimestampStruct, length: number): StringRga;
    private cStrChunk;
    cBin(id: ITimestampStruct, length: number): BinaryRga;
    private cBinChunk;
}
