import { ApiPath, ArrayApi, BinaryApi, ConstApi, NodeApi, ObjectApi, StringApi, TupleApi, ValueApi } from './nodes';
import { Patch } from '../../../json-crdt-patch/Patch';
import { PatchBuilder } from '../../../json-crdt-patch/PatchBuilder';
import { JsonNode } from '../../types';
import { ArrayLww } from '../../types/lww-array/ArrayLww';
import { Const } from '../../types/const/Const';
import { ObjectLww } from '../../types/lww-object/ObjectLww';
import { ArrayRga } from '../../types/rga-array/ArrayRga';
import { BinaryRga } from '../../types/rga-binary/BinaryRga';
import { StringRga } from '../../types/rga-string/StringRga';
import { ValueLww } from '../../types/lww-value/ValueLww';
import type { Model } from '../Model';
export declare class ModelApi {
    readonly model: Model;
    builder: PatchBuilder;
    next: number;
    constructor(model: Model);
    private changeQueued;
    private readonly queueChange;
    private et;
    get events(): EventTarget;
    wrap(node: ValueLww): ValueApi;
    wrap(node: StringRga): StringApi;
    wrap(node: BinaryRga): BinaryApi;
    wrap(node: ArrayRga): ArrayApi;
    wrap(node: ObjectLww): ObjectApi;
    wrap(node: Const): ConstApi;
    wrap(node: ArrayLww): TupleApi;
    get node(): NodeApi<JsonNode, unknown>;
    get r(): NodeApi<import("../../types/lww-root/RootLww").RootLww, unknown>;
    in(path?: ApiPath): ValueApi;
    find(path?: ApiPath): JsonNode;
    val(path?: ApiPath): ValueApi;
    tup(path?: ApiPath): TupleApi;
    str(path?: ApiPath): StringApi;
    bin(path?: ApiPath): BinaryApi;
    arr(path?: ApiPath): ArrayApi;
    obj(path?: ApiPath): ObjectApi;
    const(path?: ApiPath): ConstApi;
    root(json: unknown): this;
    apply(): void;
    advance(): void;
    view(): unknown;
    flush(): Patch;
}
