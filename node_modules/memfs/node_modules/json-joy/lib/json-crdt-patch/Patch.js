"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Patch = void 0;
const operations_1 = require("./operations");
const clock_1 = require("./clock");
const binary_1 = require("./codec/binary");
class Patch {
    constructor() {
        this.ops = [];
        this.meta = undefined;
    }
    static fromBinary(data) {
        return (0, binary_1.decode)(data);
    }
    getId() {
        const op = this.ops[0];
        if (!op)
            return undefined;
        return op.id;
    }
    span() {
        let span = 0;
        for (const op of this.ops)
            span += op.span();
        return span;
    }
    nextTime() {
        const ops = this.ops;
        const length = ops.length;
        if (!length)
            return 0;
        const lastOp = ops[length - 1];
        return lastOp.id.time + lastOp.span();
    }
    rewriteTime(ts) {
        const patch = new Patch();
        const ops = this.ops;
        const length = ops.length;
        const patchOps = patch.ops;
        for (let i = 0; i < length; i++) {
            const op = ops[i];
            if (op instanceof operations_1.DelOp)
                patchOps.push(new operations_1.DelOp(ts(op.id), ts(op.obj), op.what));
            else if (op instanceof operations_1.NewConOp)
                patchOps.push(new operations_1.NewConOp(ts(op.id), op.val));
            else if (op instanceof operations_1.NewVecOp)
                patchOps.push(new operations_1.NewVecOp(ts(op.id)));
            else if (op instanceof operations_1.NewValOp)
                patchOps.push(new operations_1.NewValOp(ts(op.id), ts(op.val)));
            else if (op instanceof operations_1.NewObjOp)
                patchOps.push(new operations_1.NewObjOp(ts(op.id)));
            else if (op instanceof operations_1.NewStrOp)
                patchOps.push(new operations_1.NewStrOp(ts(op.id)));
            else if (op instanceof operations_1.NewBinOp)
                patchOps.push(new operations_1.NewBinOp(ts(op.id)));
            else if (op instanceof operations_1.NewArrOp)
                patchOps.push(new operations_1.NewArrOp(ts(op.id)));
            else if (op instanceof operations_1.InsArrOp)
                patchOps.push(new operations_1.InsArrOp(ts(op.id), ts(op.obj), ts(op.ref), op.data.map(ts)));
            else if (op instanceof operations_1.InsStrOp)
                patchOps.push(new operations_1.InsStrOp(ts(op.id), ts(op.obj), ts(op.ref), op.data));
            else if (op instanceof operations_1.InsBinOp)
                patchOps.push(new operations_1.InsBinOp(ts(op.id), ts(op.obj), ts(op.ref), op.data));
            else if (op instanceof operations_1.InsValOp)
                patchOps.push(new operations_1.InsValOp(ts(op.id), ts(op.obj), ts(op.val)));
            else if (op instanceof operations_1.InsObjOp)
                patchOps.push(new operations_1.InsObjOp(ts(op.id), ts(op.obj), op.data.map(([key, value]) => [key, ts(value)])));
            else if (op instanceof operations_1.NopOp)
                patchOps.push(new operations_1.NopOp(ts(op.id), op.len));
        }
        return patch;
    }
    rebase(serverTime, transformHorizon) {
        const id = this.getId();
        if (!id)
            throw new Error('EMPTY_PATCH');
        const patchStartTime = id.time;
        if (patchStartTime === serverTime)
            return this;
        const delta = serverTime - patchStartTime;
        return this.rewriteTime((id) => {
            const sessionId = id.sid;
            const isServerTimestamp = sessionId === 1;
            if (!isServerTimestamp)
                return id;
            const time = id.time;
            if (time < transformHorizon)
                return id;
            return (0, clock_1.ts)(1, time + delta);
        });
    }
    clone() {
        return this.rewriteTime((id) => id);
    }
    toBinary() {
        return (0, binary_1.encode)(this);
    }
    toString(tab = '') {
        const id = this.getId();
        let out = `${this.constructor.name} ${id ? (0, clock_1.toDisplayString)(id) : '(nil)'}!${this.span()}`;
        for (let i = 0; i < this.ops.length; i++) {
            const isLast = i === this.ops.length - 1;
            out += `\n${tab}${isLast ? '└─' : '├─'} ${this.ops[i].toString(tab + (isLast ? '  ' : '│ '))}`;
        }
        return out;
    }
}
exports.Patch = Patch;
