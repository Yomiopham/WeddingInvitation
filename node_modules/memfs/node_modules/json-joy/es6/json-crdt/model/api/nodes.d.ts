import { ArrayRga } from '../../types/rga-array/ArrayRga';
import { BinaryRga } from '../../types/rga-binary/BinaryRga';
import { Const } from '../../types/const/Const';
import { ObjectLww } from '../../types/lww-object/ObjectLww';
import { Path } from '../../../json-pointer';
import { StringRga } from '../../types/rga-string/StringRga';
import { ValueLww } from '../../types/lww-value/ValueLww';
import { ArrayLww } from '../../types/lww-array/ArrayLww';
import { ExtensionApi, ExtensionDefinition, ExtensionJsonNode } from '../../extensions/types';
import { NodeEvents } from './events/NodeEvents';
import type { JsonNode } from '../../types';
import type { ModelApi } from './ModelApi';
export type ApiPath = string | number | Path | void;
export declare class NodeApi<N extends JsonNode = JsonNode, View = unknown> {
    readonly node: N;
    readonly api: ModelApi;
    constructor(node: N, api: ModelApi);
    private ev;
    get events(): NodeEvents;
    find(path?: ApiPath): JsonNode;
    in(path?: ApiPath): ValueApi;
    asVal(): ValueApi;
    asStr(): StringApi;
    asBin(): BinaryApi;
    asArr(): ArrayApi;
    asTup(): TupleApi;
    asObj(): ObjectApi;
    asConst(): ConstApi;
    asExt<EN extends ExtensionJsonNode, V, EApi extends ExtensionApi<EN, V>>(ext: ExtensionDefinition<V, any, EN, EApi>): EApi;
    val(path?: ApiPath): ValueApi;
    str(path?: ApiPath): StringApi;
    bin(path?: ApiPath): BinaryApi;
    arr(path?: ApiPath): ArrayApi;
    tup(path?: ApiPath): TupleApi;
    obj(path?: ApiPath): ObjectApi;
    const(path?: ApiPath): ConstApi;
    view(): View;
}
export declare class ArrayApi extends NodeApi<ArrayRga, unknown[]> {
    ins(index: number, values: unknown[]): this;
    del(index: number, length: number): this;
    length(): number;
}
export declare class TupleApi extends NodeApi<ArrayLww, unknown[]> {
    set(entries: [index: number, value: unknown][]): this;
}
export declare class BinaryApi extends NodeApi<BinaryRga, Uint8Array> {
    ins(index: number, data: Uint8Array): this;
    del(index: number, length: number): this;
}
export declare class ConstApi extends NodeApi<Const, unknown> {
    view(): unknown;
}
export declare class ObjectApi extends NodeApi<ObjectLww, unknown[]> {
    set(entries: Record<string, unknown>): this;
    del(keys: string[]): this;
}
export declare class StringApi extends NodeApi<StringRga, string> {
    ins(index: number, text: string): this;
    del(index: number, length: number): this;
}
export declare class ValueApi extends NodeApi<ValueLww, unknown> {
    set(json: unknown): this;
}
