import { ITimestampStruct } from '../../../../json-crdt-patch/clock';
import { ClockTable } from '../../../../json-crdt-patch/codec/clock/ClockTable';
import { CrdtWriter } from '../../../../json-crdt-patch/util/binary/CrdtEncoder';
import { MsgPackEncoder } from '../../../../json-pack/msgpack';
import { Model } from '../../../model';
import { JsonNode } from '../../../types';
import { Const } from '../../../types/const/Const';
import { ObjectLww } from '../../../types/lww-object/ObjectLww';
import { ValueLww } from '../../../types/lww-value/ValueLww';
import { ArrayRga } from '../../../types/rga-array/ArrayRga';
import { BinaryRga } from '../../../types/rga-binary/BinaryRga';
import { StringRga } from '../../../types/rga-string/StringRga';
import { IndexedFields } from './types';
export declare class Encoder {
    protected clockTable?: ClockTable;
    readonly enc: MsgPackEncoder<CrdtWriter>;
    protected model?: IndexedFields;
    encode(doc: Model, clockTable?: ClockTable): IndexedFields;
    protected readonly onNode: (map: Map<number, JsonNode>, sid: number) => void;
    encodeNode(node: JsonNode): Uint8Array;
    protected ts(id: ITimestampStruct): void;
    encodeVal(node: ValueLww): Uint8Array;
    encodeConst(node: Const): Uint8Array;
    encodeStr(node: StringRga): Uint8Array;
    encodeBin(node: BinaryRga): Uint8Array;
    encodeObj(node: ObjectLww): Uint8Array;
    protected readonly onObjectKey: (value: ITimestampStruct, key: string) => void;
    encodeArr(node: ArrayRga): Uint8Array;
}
