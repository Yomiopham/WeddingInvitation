import { ArrayRga } from '../../../types/rga-array/ArrayRga';
import { BinaryRga } from '../../../types/rga-binary/BinaryRga';
import { ClockEncoder } from '../../../../json-crdt-patch/codec/clock/ClockEncoder';
import { Const } from '../../../types/const/Const';
import { CrdtWriter } from '../../../../json-crdt-patch/util/binary/CrdtEncoder';
import { ITimestampStruct } from '../../../../json-crdt-patch/clock';
import { JsonNode } from '../../../types';
import { MsgPackEncoder } from '../../../../json-pack/msgpack';
import { ObjectLww } from '../../../types/lww-object/ObjectLww';
import { RootLww } from '../../../types/lww-root/RootLww';
import { StringRga } from '../../../types/rga-string/StringRga';
import { ValueLww } from '../../../types/lww-value/ValueLww';
import { ArrayLww } from '../../../types/lww-array/ArrayLww';
import type { Model } from '../../../model';
export declare class Encoder extends MsgPackEncoder<CrdtWriter> {
    protected clockEncoder: ClockEncoder;
    protected time: number;
    protected doc: Model;
    constructor();
    encode(doc: Model): Uint8Array;
    encodeLogical(model: Model): void;
    encodeServer(model: Model): void;
    protected encodeClockTable(x0: number, x: number): void;
    protected readonly cTableEntry: (entry: {
        clock: ITimestampStruct;
    }) => void;
    protected readonly tsLogical: (ts: ITimestampStruct) => void;
    protected readonly tsServer: (ts: ITimestampStruct) => void;
    protected ts: (ts: ITimestampStruct) => void;
    protected cRoot(root: RootLww): void;
    protected cNode(node: JsonNode): void;
    protected cObj(obj: ObjectLww): void;
    protected readonly cKey: (val: ITimestampStruct, key: string) => void;
    protected cTup(obj: ArrayLww): void;
    protected cArr(obj: ArrayRga): void;
    protected cStr(obj: StringRga): void;
    protected cBin(obj: BinaryRga): void;
    protected cVal(obj: ValueLww): void;
    protected cConst(obj: Const): void;
}
