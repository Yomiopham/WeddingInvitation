import { TypeSystem } from '../json-type/system/TypeSystem';
import { RoutesBase, TypeRouter } from '../json-type/system/TypeRouter';
import { TypeRouterCaller } from '../reactive-rpc/common/rpc/caller/TypeRouterCaller';
import type { CliCodecs } from './CliCodecs';
import type { TypeBuilder } from '../json-type/type/TypeBuilder';
import type { RunOptions } from './types';
export interface CliOptions<Router extends TypeRouter<any>> {
    codecs: CliCodecs;
    router?: Router;
    version?: string;
    cmd?: string;
}
export declare class Cli<Router extends TypeRouter<RoutesBase>> {
    protected readonly options: CliOptions<Router>;
    router: Router;
    readonly types: TypeSystem;
    readonly t: TypeBuilder;
    readonly caller: TypeRouterCaller<Router>;
    readonly codecs: CliCodecs;
    constructor(options: CliOptions<Router>);
    run(options?: RunOptions): void;
    runAsync(options?: Partial<RunOptions>): Promise<void>;
    private ingestStdinInput;
    cmd(): string;
    private printVersion;
    private printHelp;
    private getStdin;
    private getStdinValue;
}
